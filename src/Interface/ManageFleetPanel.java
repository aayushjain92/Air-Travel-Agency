/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Fleet;
import Business.Airline;
import Business.FleetDirectory;
import Business.AirlineDirectory;
import Business.BookingDirectory;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author info
 */
public class ManageFleetPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageAccountPanel
     */
    private AirlineDirectory airlineDir;
    private FleetDirectory fleetDir;
    private BookingDirectory bookingDir;
    private JPanel rightPanel;

    ManageFleetPanel(JPanel rightPanel, AirlineDirectory airlineDir, FleetDirectory fleetDir, BookingDirectory bookingDir) {
        initComponents();
        this.airlineDir = airlineDir;
        this.fleetDir = fleetDir;
        this.bookingDir = bookingDir;
        populate();
        this.rightPanel = rightPanel;
    }

    public void populate() {
        DefaultTableModel dtm = (DefaultTableModel) tblDirectory.getModel();
        dtm.setRowCount(0);
        String searchtext = txtsearch.getText().trim().toLowerCase();
        DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
        df.setLenient(false);
        
        if (searchtext.length() > 0) {
            for (Fleet a : fleetDir.getFleetDirectory()) {
                if (a.getAirline().trim().toLowerCase().contains(searchtext)) {
                    Object[] row = new Object[dtm.getColumnCount()];
                    row[0] = a;
                    row[1] = a.getAirline();
                    row[2] = a.getSource();
                    row[3] = a.getDestination();
                    row[4] = a.getDepartureTime();
                    row[5] = df.format(a.getFlightDate());
                    dtm.addRow(row);
                }
            }
        } else {
            for (Fleet a : fleetDir.getFleetDirectory()) {
                Object[] row = new Object[dtm.getColumnCount()];
                row[0] = a;
                row[1] = a.getAirline();
                row[2] = a.getSource();
                row[3] = a.getDestination();
                row[4] = a.getDepartureTime();
                row[5] = df.format(a.getFlightDate());
                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDirectory = new javax.swing.JTable();
        lblManage = new javax.swing.JLabel();
        lblSearchFlight = new javax.swing.JLabel();
        txtsearch = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnModifyFleet = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 255));

        tblDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight No", "Airline", "Source", "Destination", "Departure Time", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDirectory);

        lblManage.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblManage.setText("Manage Fleet");

        lblSearchFlight.setText("Search by Flight Name");

        btnDelete.setText("Delete Flight");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnModifyFleet.setText("Modify Fleet");
        btnModifyFleet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyFleetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(80, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearchFlight)
                        .addGap(18, 18, 18)
                        .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear)
                        .addGap(102, 102, 102))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnModifyFleet, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(226, 226, 226)
                                .addComponent(lblManage))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(btnBack)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(lblManage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchFlight)
                    .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnClear))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnModifyFleet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                Fleet fleet = (Fleet) tblDirectory.getValueAt(selectedRow, 0);
                if (bookingDir.searchBooking(fleet.getAirline()) == null) {
                    fleetDir.deleteFleet(fleet);
                    populate();
                } else {
                    JOptionPane.showMessageDialog(null, "There is a booking of this flight, please cancel the booking before deleting the flight");
                    return;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        rightPanel.remove(this);
        CardLayout cardLayout = (CardLayout) rightPanel.getLayout();
        cardLayout.previous(rightPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtsearch.setText("");
        populate();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchtext = txtsearch.getText().trim().toLowerCase();
        if (searchtext.length() > 0) {
            populate();
        } else {
            JOptionPane.showMessageDialog(null, "Please enter search text");
            return;
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnModifyFleetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyFleetActionPerformed
        // TODO add your handling code here:
        int row = tblDirectory.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
            return;
        }
        Fleet fleet = (Fleet) tblDirectory.getValueAt(row, 0);
        if (bookingDir.searchBooking(fleet.getAirline()) == null) {
            ViewFleetPanel viewPanel = new ViewFleetPanel(rightPanel, fleet, fleetDir);
            CardLayout cardLayout = (CardLayout) rightPanel.getLayout();
            rightPanel.add(viewPanel);
            cardLayout.next(rightPanel);
        } else {
            JOptionPane.showMessageDialog(null, "There is a booking of this flight, please cancel the booking before deleting the flight");
            return;
        }
    }//GEN-LAST:event_btnModifyFleetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnModifyFleet;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblManage;
    private javax.swing.JLabel lblSearchFlight;
    private javax.swing.JTable tblDirectory;
    private javax.swing.JTextField txtsearch;
    // End of variables declaration//GEN-END:variables
}
